# Ultralytics YOLO ðŸš€, AGPL-3.0 license
# Builds GitHub actions CI runner image for deployment to DockerHub https://hub.docker.com/r/ultralytics/ultralytics
# Image is CUDA-optimized for YOLOv8 single/multi-GPU training and inference tests

# Start FROM Ultralytics GPU image
FROM ultralytics/ultralytics:latest

# Set the working directory
WORKDIR /actions-runner

# Download and unpack the latest runner
RUN curl -o actions-runner-linux-x64-2.308.0.tar.gz -L https://github.com/actions/runner/releases/download/v2.308.0/actions-runner-linux-x64-2.308.0.tar.gz && \
    tar xzf actions-runner-linux-x64-2.308.0.tar.gz && \
    rm actions-runner-linux-x64-2.308.0.tar.gz

# Install runner dependencies
ENV RUNNER_ALLOW_RUNASROOT=1
ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update && \
    rm -rf /var/lib/apt/lists/* # Clear package list so it isn't included in the layer
RUN ./bin/installdependencies.sh
RUN apt-get -y install libicu-dev

# Inline ENTRYPOINT command to configure and start runner
ENTRYPOINT sh -c './config.sh --url https://github.com/ultralytics/ultralytics \
                              --token ${GITHUB_RUNNER_TOKEN:-AGMXEGI54KO5WISICKIKRMTE5FOG6} \
                              --name gpu-runners \
                              --labels gpu-latest && \
                  ./run.sh'


# Usage Examples -------------------------------------------------------------------------------------------------------

# Build and Push
# t=ultralytics/ultralytics:latest-runner && sudo docker build -f docker/Dockerfile-runner -t $t . && sudo docker push $t

# Pull and Run with access to GPUs 2 and 3 (inside container CUDA devices will appear as 0 and 1)
# t=ultralytics/ultralytics:latest-runner && sudo docker run -e GITHUB_RUNNER_TOKEN=your_new_token_here --ipc=host --gpus '"device=2,3"' $t
