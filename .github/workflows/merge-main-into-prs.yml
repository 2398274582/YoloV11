# Ultralytics YOLO ðŸš€, AGPL-3.0 license
# Automatically merges repository 'main' branch into all open PRs to keep them up-to-date
# Action runs on updates to main branch so when one PR merges to main all others update

name: Merge main into PRs

on:
  workflow_dispatch:
  # push:
  #   branches:
  #     - main

jobs:
  Merge:
    if: github.repository == 'ultralytics/ultralytics'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
      - name: Install requirements
        run: |
          pip install pygithub
      - name: Merge main into PRs
        shell: python
        run: |
          from github import Github
          import os

          g = Github(os.getenv('GITHUB_TOKEN'))
          repo = g.get_repo(os.getenv('GITHUB_REPOSITORY'))
          open_pulls = repo.get_pulls(state='open', sort='created')

          for pr in open_pulls:
              try:
                  # Check if PR is behind main
                  base_branch = repo.get_branch(pr.base.ref)
                  comparison = repo.compare(pr.head.sha, base_branch.commit.sha)
                  
                  if comparison.behind_by > 0:
                      # PR is behind, let's update it
                      print(f"Updating PR #{pr.number} ({pr.head.ref})")
                      
                      # Create a merge commit
                      merge_commit = repo.merge(
                          pr.head.ref,
                          base_branch.commit.sha,
                          f"Merge branch '{pr.base.ref}' into {pr.head.ref}"
                      )
                      
                      if merge_commit:
                          print(f"Successfully updated PR #{pr.number}")
                      else:
                          print(f"Failed to update PR #{pr.number}. There might be conflicts.")
                  else:
                      print(f"PR #{pr.number} is up to date with {pr.base.ref}")
              except Exception as e:
                  print(f"Error processing PR #{pr.number}: {e}")
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
